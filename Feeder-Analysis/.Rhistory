# Default parameters
paramsList = defaultParametersFuzzy(CNOlistDREAM, DreamModel)
# Some Genetic Algorithm parameters
paramsList$popSize = 50
paramsList$maxTime = 5*60
paramsList$maxGens = 200
paramsList$stallGenMax = 50
paramsList$verbose = FALSE
# Default Fuzzy Logic Type1 parameters (Hill transfer functions)
nrow = 7
paramsList$type1Funs = matrix(data = NaN,nrow=nrow,ncol=3)
paramsList$type1Funs[,1] = 1
paramsList$type1Funs[,2] = c(3, 3, 3, 3, 3, 3, 1.01)
paramsList$type1Funs[,3] = c(0.2, 0.3, 0.4, 0.55, 0.72,1.03, 68.5098)
# Default Fuzzy Logic Type2 parameters
nrow = 7
paramsList$type2Funs = matrix(data = NaN,nrow=nrow,ncol=3)
paramsList$type2Funs[,1] = seq(from=0.2, to=0.8, length=nrow)
#paramsList$type2Funs[,1] = c(0.2,0.3,0.4,0.5,0.6,0.7,0.8)
paramsList$type2Funs[,2] = 1
paramsList$type2Funs[,3] = 1
paramsList$redThres = c(0, 0.0001, 0.0005, 0.001, 0.003, 0.005, 0.01)
paramsList$optimisation$algorithm = "NLOPT_LN_SBPLX"
paramsList$optimisation$xtol_abs = 0.001
paramsList$optimisation$maxeval = 10000
paramsList$optimisation$maxtime = 60*5
N = 10
allRes = list()
for (i in 1:N){
7
Res = CNORwrapFuzzy(CNOlistDREAM, DreamModel, paramsList=paramsList,
verbose=TRUE)
allRes[[i]] = Res
}
summary = compileMultiRes(allRes, show=TRUE)
plotMeanFuzzyFit(0.01, summary$allFinalMSEs, allRes)
plotMeanFuzzyFit(0.5, summary$allFinalMSEs, allRes)
writeFuzzyNetwork(0.01, summary$allFinalMSEs, allRes, "output_dream")
library(readr)
prunnedPKN_sif <- read_delim("~/Desktop/PHONEMeS-Ariel/Very-Final/InitialAnalysis/postFeeder/prunnedPKN.sif.txt",
" ", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
View(prunnedPKN_sif)
net1 <- prunnedPKN_sif
library(readr)
prunnedPKN_sif <- read_delim("~/Desktop/PHONEMeS-Ariel/Very-Final/InitialAnalysis/preFeeder/prunnedPKN.sif.txt",
"\t", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
View(prunnedPKN_sif)
net2 <-prunnedPKN_sif
View(net1)
View(net2)
?format
format(1810032000, scientific = FALSE)
format(0.000003, scientific = FALSE)
format(0.000003, scientific = TRUE)
format(0.000003, scientific = FALSE)
2^20
intToBits(2^20)
intToBits(1)
intToBits(1)[1:20]
intToBits(2^15)[1:20]
length(intToBits(2^20))
intToBits(2^20, 20)
intToBits(2^20)
intToBits(1377)
intToBits(1)
remove.packages(pkgs = "CellNOptR")
remove.packages(CellNOptR)
remove.packages(CNORode2017)
remove.packages("CNORode2017")
remove.packages("CNORode2017")
remove.packages("MEIGOR")
install.packages("ggraph")
install.packages("ggraph")
library("ggraph")
library(CytobankAPI)
data<-matrix(1:9,nrow=3,ncol=3,byrow=TRUE)
colnames(data)<-c("Control","Patient1","Patient2")
rownames(data)<-c("Marker1","Marker2","Marker3")
#Normalizing patient data to control sample with cofactor of 5
asinnorm(data,1,5)
asinh(x = data)
?asinh
data
asinh(8/7)
asinh(7/8)
asinh(1/100)
asinnorm<-function(mat,col,cofactor){
norm<-asinh(mat[,col]/cofactor)
tmat<-asinh(mat/cofactor)
x<-tmat-norm
return(x)
}
data<-matrix(1:9,nrow=3,ncol=3,byrow=TRUE)
colnames(data)<-c("Control","Patient1","Patient2")
rownames(data)<-c("Marker1","Marker2","Marker3")
#Normalizing patient data to control sample with cofactor of 5
asinnorm(data,1,5)
data<-matrix(9:1,nrow=3,ncol=3,byrow=TRUE)
colnames(data)<-c("Control","Patient1","Patient2")
rownames(data)<-c("Marker1","Marker2","Marker3")
#Normalizing patient data to control sample with cofactor of 5
asinnorm(data,1,5)
library(CARNIVAL)
?runCARNIVAL
median(x = c(1, 2, 3, 4))
1.3/2
1.25/2
sd(rep(0.3, 3))
sd(rep(0, 0.1, 0.9))
sd(c(0, 0.1, 0.9))
1.6+0.7
2.3/4
+0.5
0.575+0.5
1.075/1.5
0.9+0.8+0.8+0.7
3.2/4
0.8+0.33
1.13/0.33
1.13/1.33
0.2+0.15+0.1+0.1
0.55/4
0.1375+0.5
0.6375/1.5
load(file = "~/Desktop/Ariel-Final/Project-15/PHONEMeS/PHONEMeS/PHONEMeS_01_10%/resList_1.RData")
resList[[1]]
314-245
kk = resList[[1]][[2]]
View(kk)
nrow(resList[[1]][[1]])
nrow(resList[[1]][[2]])
kk1 = resList[[1]][[1]]
kk2 = resList[[1]][[2]]
View(kk1)
View(kk2)
252-245
load(file = "~/Desktop/Ariel-Final/Project-15/PHONEMeS/PHONEMeS/PHONEMeS_01_10%/resList_1.RData")
rm(list = ls())
load(file = "~/Desktop/Ariel-Final/Project-15/PHONEMeS/PHONEMeS/PHONEMeS_01_10%/resList_1.RData")
kk1 resList[[40]][[1]]
kk1 <- resList[[40]][[1]]
kk2 <- resList[[40]][[2]]
256-247
View(kk2)
idx = c()
for(ii in 1:nrow(kk2)){if(length(intersect(which(kk1[,1]==kk2[ii, 1]), which(kk1[, 3]==kk2[ii, 3])))==0{idx=c(idx, ii)})}
idx
idx = c()
for(ii in 1:nrow(kk2)){if(length(intersect(which(kk1[,1]==kk2[ii, 1]), which(kk1[, 3]==kk2[ii, 3])))==0){idx=c(idx, ii)}}
idx
kk2[idx, ]
load(file = "~/Desktop/Ariel-Final/Project-15/Prepare-Data/cnolist.RData")
kk2[idx, ]
plotCNOlist(CNOlist = cnolist)
which(colnames(cnolist@signals$`0`)=="STAT3_S727")
ncol(cnolist@signals$`0`)
which(colnames(cnolist@signals$`0`)=="GSK3B_Y216")
which(colnames(cnolist@signals$`0`)=="RB1_T821")
load(file = "~/Desktop/Ariel-Final/Project-15/PHONEMeS/Build-BN-PKN/dataInput_pval_01_fc_10%.RData")
dataInput$resFC$RB1_T821
dataInput$resFC$RB1_T821
kk2[idx, ]
dataInput$resFC$STAT3_S727
which(colnames(cnolist@signals$`0`)=="STAT3_S727")
ncol(cnolist@signals$`0`)
dev.off()
load(file = "~/Desktop/Ariel-Final/Project-15/PHONEMeS/PHONEMeS/PHONEMeS_005_50%/resList_1.RData")
kk1 = resList[[1]][[1]]
kk2 = resList[[1]][[2]]
idx = c()
for(ii in 1:nrow(kk2)){if(length(intersect(x = which(kk1[,1]==kk2[ii,1]), y = which(kk1[,3]==kk2[ii,3])))==0){idx=c(idx,ii)}}
idx
kk2[idx, ]
rm(list = ls())
load(file = "~/Desktop/Ariel-Final/Project-15/PHONEMeS/PHONEMeS/PHONEMeS_005_50%/resList_1.RData")
kk1 = resList[[1]][[1]]
kk2 = resList[[1]][[2]]
idx = c()
for(ii in 1:nrow(kk2)){if(length(intersect(x = which(kk1[,1]==kk2[ii,1]), y = which(kk1[,3]==kk2[ii,3])))==0){idx=c(idx,ii)}}
idx
kk2[idx, ]
runif(n = 10, min = 1, max = 10000)
round(runif(n = 10, min = 1, max = 10000))
c(1690, 1467, 4237, 6188, 4752, 9308, 8693, 6533, 5186, 9726)
seeds = c(1690, 1467, 4237, 6188, 4752, 9308, 8693, 6533, 5186, 9726)
runif(n = 10, min = 1, max = 10000)
round(runif(n = 10, min = 1, max = 10000))
seeds = c(4651, 2361, 5206,  746, 5331, 8304, 6516, 5135, 9877, 9264)
library(CNORfeeder)
data(CNOlistDREAM,package="CellNOptR")
data(DreamModel,package="CellNOptR")
BTable <- makeBTables(CNOlist=CNOlistDREAM, k=2, measErr=c(0.1, 0))
BTable
Lrank <- linksRanking(CNOlist=CNOlistDREAM, measErr=c(0.1, 0), savefile=FALSE)
model<-preprocessing(data=CNOlistDREAM, model=DreamModel)
modelIntegr <- mapBTables2model(BTable=BTable,model=model,allInter=TRUE)
modelIntegr$reacID[modelIntegr$indexIntegr]
plotModel(model=modelIntegr, CNOlist=CNOlistDREAM, indexIntegr=modelIntegr$indexIntegr)
data(PPINigraph,package="CNORfeeder")
PPINigraph
PPINigraph[[1]]
PPINigraph[[2]]
PPINigraph[[3]]
PPINigraph[[4]]
PPINigraph[[5]]
PPINigraph[[6]]
?PPINigraph
data(UniprotIDdream,package="CNORfeeder")
modelIntegrWeight <- weighting(modelIntegr=modelIntegr, PKNmodel=DreamModel,
CNOlist=CNOlistDREAM, integrFac=10,
UniprotID=UniprotIDdream, PPI=PPINigraph)
library(devtools)
library(devtools)
devtools::install_github("davismcc/scater", build_vignettes = TRUE,ref = "RELEASE_3_6")
devtools::install_github("MarioniLab/scran", ref="RELEASE_3_6")
version
library(scater)
error = c(0.05, 0.1, 0.2)
pL = c(2, 3, 4, Inf)
penalty = c(1, 2, 5, 10, 50)
mm = matrix(data = , nrow = 1, ncol = 3)
for(ii in 1:length(error)){
for(jj in 1:length(pL)){
for(kk in 1:length(penalty)){
toBind = t(as.matrix(c(error[ii], pL[jj], penalty[kk])))
mm = rbind(mm, toBind)
}
}
}
mm = mm[-1, ]
nrow(mm)
error = c(0.05, 0.1, 0.2)
pL = c(2, 3, 4, Inf)
penalty = c(1, 2, 5, 10, 50, 100)
mm = matrix(data = , nrow = 1, ncol = 3)
for(ii in 1:length(error)){
for(jj in 1:length(pL)){
for(kk in 1:length(penalty)){
toBind = t(as.matrix(c(error[ii], pL[jj], penalty[kk])))
mm = rbind(mm, toBind)
}
}
}
mm = mm[-1, ]
nrow(mm)
error = c(0.05, 0.1, 0.2)
pL = c(2, 3, 4, Inf)
penalty = c(1, 2, 5, 10, 50)
mm = matrix(data = , nrow = 1, ncol = 3)
for(ii in 1:length(error)){
for(jj in 1:length(pL)){
for(kk in 1:length(penalty)){
toBind = t(as.matrix(c(error[ii], pL[jj], penalty[kk])))
mm = rbind(mm, toBind)
}
}
}
mm = mm[-1, ]
mm
error = c(0.05, 0.1, 0.2)
pL = c(1, 2, 3, 4, Inf)
penalty = c(1, 2, 5, 10, 50)
mm = matrix(data = , nrow = 1, ncol = 3)
for(ii in 1:length(error)){
for(jj in 1:length(pL)){
for(kk in 1:length(penalty)){
toBind = t(as.matrix(c(error[ii], pL[jj], penalty[kk])))
mm = rbind(mm, toBind)
}
}
}
mm = mm[-1, ]
nrow(mm)
getwd()
setwd("~/Documents/GitHub/FOSBE2019/Feeder-Analysis/")
library(CellNOptR)
library(MEIGOR)
library(CNORode)
library(doParallel)
library(readr)
library(infotheo)
library(igraph)
load(file = "../Results/Best-Solutions/opt_pars_initial.RData")
load(file = "../Data/cnolist.RData")
load(file = "../Data/model.RData")
source("../Public/aicCNO.R")
initial = aicCNO(model = model, cnolist = cnolist, opt_pars = opt_pars_initial)
initialAIC = initial$AIC
initialBIC = initial$BIC
rm(opt_pars_initial)
error = c(0.05, 0.1, 0.2)
pL = c(1, 2, 3, 4, Inf)
penalty = c(5, 10, 50, 100)
mm = matrix(data = , nrow = 1, ncol = 3)
for(ii in 1:length(error)){
for(jj in 1:length(pL)){
for(kk in 1:length(penalty)){
toBind = t(as.matrix(c(error[ii], pL[jj], penalty[kk])))
mm = rbind(mm, toBind)
}
}
}
mm = mm[-1, ]
idxBestAIC = NULL
aicBest = 100000
aicScores = c()
for(ii in 1:nrow(mm)){
currFile = paste0("../Results/Cluster-Results/res_feeder_", mm[ii, 1], "_", mm[ii, 2], "_", mm[ii, 3], ".RData")
if(file.exists(currFile)){
load(file = currFile)
score = aicCNO(model = res$`Integrated-Model`$model, cnolist = res$CNOList, opt_pars = res$Parameters)
aicScores = c(aicScores, score$AIC)
if(score$AIC < aicBest){
aicBest = score$AIC
idxBestAIC = ii
save(res, file = "../Results/Best-Solutions/opt_pars_feeder.RData")
}
}
}
dev.off()
rm(list = ls())
library(CellNOptR)
library(MEIGOR)
library(CNORode)
library(doParallel)
library(readr)
library(infotheo)
library(igraph)
load(file = "../Results/Best-Solutions/opt_pars_initial.RData")
load(file = "../Data/cnolist.RData")
load(file = "../Data/model.RData")
source("../Public/aicCNO.R")
initial = aicCNO(model = model, cnolist = cnolist, opt_pars = opt_pars_initial)
initialAIC = initial$AIC
initialBIC = initial$BIC
rm(opt_pars_initial)
error = c(0.05, 0.1, 0.2)
pL = c(1, 2, 3, 4, Inf)
penalty = c(5, 10, 50, 100)
mm = matrix(data = , nrow = 1, ncol = 3)
for(ii in 1:length(error)){
for(jj in 1:length(pL)){
for(kk in 1:length(penalty)){
toBind = t(as.matrix(c(error[ii], pL[jj], penalty[kk])))
mm = rbind(mm, toBind)
}
}
}
mm = mm[-1, ]
idxBestAIC = NULL
aicBest = 100000
aicScores = c()
for(ii in 1:nrow(mm)){
currFile = paste0("../Results/Cluster-Results/res_feeder_", mm[ii, 1], "_", mm[ii, 2], "_", mm[ii, 3], ".RData")
if(file.exists(currFile)){
load(file = currFile)
score = aicCNO(model = res$`Integrated-Model`$model, cnolist = res$CNOList, opt_pars = res$Parameters)
aicScores = c(aicScores, score$AIC)
if(score$AIC < aicBest){
aicBest = score$AIC
idxBestAIC = ii
save(res, file = "../Results/Best-Solutions/opt_pars_feeder.RData")
}
}
}
mm[idxBestAIC, ]
load(file = paste0("../Results/Cluster-Results/res_feeder_", mm[idxBestAIC, 1], "_", mm[idxBestAIC, 2], "_", mm[idxBestAIC, 3], ".RData"))
plotLBodeFitness(cnolist = res$CNOList, model = res$`Integrated-Model`$model, ode_parameters = res$Parameters, transfer_function = 4)
initialAIC
aicBest
plotModel(model = res$`Integrated-Model`$model, CNOlist = res$CNOList, indexIntegr = res$`Integrated-Model`$integLinksIdx)
aicScores
ss = order(aicScores, decreasing = FALSE)
idxBestAIC
ss
which(ss==32)
sort(x = aicScores, decreasing = FALSE)
mm[23, ]
rm(list = ls())
library(CellNOptR)
library(MEIGOR)
library(CNORode)
library(doParallel)
library(readr)
library(infotheo)
library(igraph)
load(file = "../Results/Best-Solutions/opt_pars_initial.RData")
load(file = "../Data/cnolist.RData")
load(file = "../Data/model.RData")
source("../Public/aicCNO.R")
initial = aicCNO(model = model, cnolist = cnolist, opt_pars = opt_pars_initial)
initialAIC = initial$AIC
initialBIC = initial$BIC
rm(opt_pars_initial)
error = c(0.05, 0.1, 0.2)
pL = c(1, 2, 3, 4, Inf)
penalty = c(5, 10, 50, 100)
mm = matrix(data = , nrow = 1, ncol = 3)
for(ii in 1:length(error)){
for(jj in 1:length(pL)){
for(kk in 1:length(penalty)){
toBind = t(as.matrix(c(error[ii], pL[jj], penalty[kk])))
mm = rbind(mm, toBind)
}
}
}
mm = mm[-1, ]
idxBestAIC = NULL
aicBest = 100000
aicScores = c()
for(ii in 1:nrow(mm)){
currFile = paste0("../Results/Cluster-Results/res_feeder_", mm[ii, 1], "_", mm[ii, 2], "_", mm[ii, 3], ".RData")
if(file.exists(currFile)){
load(file = currFile)
score = aicCNO(model = res$`Integrated-Model`$model, cnolist = res$CNOList, opt_pars = res$Parameters)
aicScores = c(aicScores, score$AIC)
if(score$AIC < aicBest){
aicBest = score$AIC
idxBestAIC = ii
save(res, file = "../Results/Best-Solutions/opt_pars_feeder.RData")
}
}
}
rm(list = ls())
library(CellNOptR)
library(MEIGOR)
library(CNORode)
library(doParallel)
library(readr)
library(infotheo)
library(igraph)
load(file = "../Results/Best-Solutions/opt_pars_initial.RData")
load(file = "../Data/cnolist.RData")
load(file = "../Data/model.RData")
source("../Public/aicCNO.R")
initial = aicCNO(model = model, cnolist = cnolist, opt_pars = opt_pars_initial)
initialAIC = initial$AIC
initialBIC = initial$BIC
rm(opt_pars_initial)
error = c(0.05, 0.1, 0.2)
pL = c(1, 2, 3, 4, Inf)
penalty = c(2, 5, 10, 50, 100)
mm = matrix(data = , nrow = 1, ncol = 3)
for(ii in 1:length(error)){
for(jj in 1:length(pL)){
for(kk in 1:length(penalty)){
toBind = t(as.matrix(c(error[ii], pL[jj], penalty[kk])))
mm = rbind(mm, toBind)
}
}
}
mm = mm[-1, ]
idxBestAIC = NULL
aicBest = 100000
aicScores = c()
for(ii in 1:nrow(mm)){
currFile = paste0("../Results/Cluster-Results/res_feeder_", mm[ii, 1], "_", mm[ii, 2], "_", mm[ii, 3], ".RData")
if(file.exists(currFile)){
load(file = currFile)
score = aicCNO(model = res$`Integrated-Model`$model, cnolist = res$CNOList, opt_pars = res$Parameters)
aicScores = c(aicScores, score$AIC)
if(score$AIC < aicBest){
aicBest = score$AIC
idxBestAIC = ii
save(res, file = "../Results/Best-Solutions/opt_pars_feeder.RData")
}
}
}
rm(list = ls())
library(CellNOptR)
library(MEIGOR)
library(CNORode)
library(doParallel)
library(readr)
library(infotheo)
library(igraph)
load(file = "../Results/Best-Solutions/opt_pars_initial.RData")
load(file = "../Data/cnolist.RData")
load(file = "../Data/model.RData")
source("../Public/aicCNO.R")
initial = aicCNO(model = model, cnolist = cnolist, opt_pars = opt_pars_initial)
dev.off()
library(CellNOptR)
library(MEIGOR)
library(CNORode)
library(doParallel)
library(readr)
library(infotheo)
library(igraph)
load(file = "../Results/Best-Solutions/opt_pars_initial.RData")
load(file = "../Data/cnolist.RData")
load(file = "../Data/model.RData")
source("../Public/aicCNO.R")
initial = aicCNO(model = model, cnolist = cnolist, opt_pars = opt_pars_initial)
dev.off()
dev.off()
library(CellNOptR)
library(MEIGOR)
library(CNORode)
library(doParallel)
library(readr)
library(infotheo)
library(igraph)
load(file = "../Results/Best-Solutions/opt_pars_initial.RData")
load(file = "../Data/cnolist.RData")
load(file = "../Data/model.RData")
source("../Public/aicCNO.R")
initial = aicCNO(model = model, cnolist = cnolist, opt_pars = opt_pars_initial)
getwd()
dev.off()
