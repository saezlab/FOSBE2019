load("~/Desktop/ETH-Zurich/02-09-2017/qAnalysis/tp_60min/Bootstrap/sifList.RData")
for(i in 1:length(sifList)){
if(i == 1){
allSIF <- sifList[[i]]
}
else{
allSIF <- rbind(allSIF, sifList[[i]])
}
}
kk <- which(allSIF[, 3]=="MK01_HUMAN")
which(allSIF[kk, 1]=="MK01_HUMAN_S29")
which(allSIF[kk, 1]=="MK01_HUMAN_Y187")
which(allSIF[kk, 1]=="MK01_HUMAN_Y205")
which(allSIF[, 3]=="MK01_HUMAN_Y205" && allSIF[, 1]=="SRC_HUMAN")
length(which(allSIF[kk, 1]=="MK01_HUMAN_Y187"))
length(which(allSIF[kk, 1]=="MK01_HUMAN_Y205"))
intersect(which(allSIF[, 1]=="SRC_HUMAN"), which(allSIF[, 3]=="MK01_HUMAN_Y205"))
length(intersect(which(allSIF[, 1]=="SRC_HUMAN"), which(allSIF[, 3]=="MK01_HUMAN_Y205")))
setwd("")
# Load packages
library(BioNet)
library(igraph)
library(PHONEMeS)
library(hash)
library(readr)
##
load("allInteractions.RData")
load(file = "dataGMMtp1.RData")
bg<-new("KPSbg", interactions=allD, species=unique(c(allD$K.ID, allD$S.cc)))
dataGMM<-new("GMMres", res=GMM, IDmap=GMM.ID, resFC=GMM.wFC)
dataInput <- dataGMM
##
targets.P <- list(cond2=c("MP2K1_HUMAN", "MK01_HUMAN", "MK03_HUMAN"), cond3=c("GSK3B_HUMAN"), cond4=c("AKT1_HUMAN", "ATM_HUMAN"),
cond5=c("PDPK1_HUMAN"), cond6=c("ATR_HUMAN"), cond7=c("CDK1_HUMAN", "CDK2_HUMAN", "CDK5_HUMAN"), cond8=c("KPCA_HUMAN"),
cond9=c("MTOR_HUMAN"), cond10=c("KPCD_HUMAN"), cond11=c("MK14_HUMAN"), cond12=c("AKT1_HUMAN", "KAPCA_HUMAN"),
cond13=c("CDK1_HUMAN", "CDK2_HUMAN", "CDK5_HUMAN"), cond14=c("MK08_HUMAN"), cond16=c("CHK1_HUMAN"), cond17=c("MTOR_HUMAN", "PK3CA_HUMAN"))
conditions <- list(c("cond2"), c("cond3"), c("cond4"), c("cond5"), c("cond6"), c("cond7"), c("cond8"), c("cond9"), c("cond10"),
c("cond11"), c("cond12"), c("cond13"), c("cond14"), c("cond16"), c("cond17"))
names(conditions) <- paste0("condition - ", c(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17))
data.P <- dataBycond(dataGMM, bg, scaled = TRUE, rowBycond = conditions)
experiments <- conditions
show(data.P)
speciesP(data.P)
##
source("buildDataMatrix.R")
source("ilpFunctions.R")
source("build_Nw.R")
source("runPHONEMeS.R")
source("build_PKN.R")
res <- runPHONEMeS(dataInput = dataInput, bg = bg, targets.P = targets.P, data.P = data.P, experiments = experiments, sizePen = 0.1)
library(BioNet)
library(igraph)
library(PHONEMeS)
library(hash)
library(readr)
load("allInteractions.RData")
load("allInteractions.RData")
?beta
library(CNORfuzzy)
library(CNORfuzzy)
data(CNOlistToy, package="CellNOptR")
data(ToyModel, package="CellNOptR")
data(CNOlistToy, package="CellNOptR")
CNOlistToy = CNOlist(CNOlistToy)
print(CNOlistToy)
# with the old CNOlist (output of makeCNOlist), type
data(CNOlistToy, package="CellNOptR")
plotCNOlist(CNOlistToy)
# with the new version, just type:
CNOlistToy = CNOlist(CNOlistToy)
plot(CNOlistToy)
paramsList = defaultParametersFuzzy(CNOlistToy, ToyModel)
paramsList$popSize = 50
paramsList$maxGens = 50
paramsList$optimisation$maxtime = 30
N = 1
allRes = list()
paramsList$verbose=TRUE
for (i in 1:N){
Res = CNORwrapFuzzy(CNOlistToy, ToyModel, paramsList=paramsList)
allRes[[i]] = Res
}
allRes
plotMeanFuzzyFit(0.1, summary$allFinalMSEs, allRes,
plotParams=list(cmap_scale=0.5, cex=.9, margin=0.3))
summary = compileMultiRes(allRes,show=FALSE)
plotMeanFuzzyFit(0.1, summary$allFinalMSEs, allRes,
plotParams=list(cmap_scale=0.5, cex=.9, margin=0.3))
summary$allFinalMSEs
summary$allFinalNumParams
length(ToyModel$reacID)
length(ToyModel$namesSpecies)
library(CNORfuzzy)
data(DreamModel, package="CellNOptR")
data(CNOlistDREAM, package="CellNOptR")
# Default parameters
paramsList = defaultParametersFuzzy(CNOlistDREAM, DreamModel)
# Some Genetic Algorithm parameters
paramsList$popSize = 50
paramsList$maxTime = 5*60
paramsList$maxGens = 200
paramsList$stallGenMax = 50
paramsList$verbose = FALSE
# Default Fuzzy Logic Type1 parameters (Hill transfer functions)
nrow = 7
paramsList$type1Funs = matrix(data = NaN,nrow=nrow,ncol=3)
paramsList$type1Funs[,1] = 1
paramsList$type1Funs[,2] = c(3, 3, 3, 3, 3, 3, 1.01)
paramsList$type1Funs[,3] = c(0.2, 0.3, 0.4, 0.55, 0.72,1.03, 68.5098)
# Default Fuzzy Logic Type2 parameters
nrow = 7
paramsList$type2Funs = matrix(data = NaN,nrow=nrow,ncol=3)
paramsList$type2Funs[,1] = seq(from=0.2, to=0.8, length=nrow)
#paramsList$type2Funs[,1] = c(0.2,0.3,0.4,0.5,0.6,0.7,0.8)
paramsList$type2Funs[,2] = 1
paramsList$type2Funs[,3] = 1
paramsList$redThres = c(0, 0.0001, 0.0005, 0.001, 0.003, 0.005, 0.01)
paramsList$optimisation$algorithm = "NLOPT_LN_SBPLX"
paramsList$optimisation$xtol_abs = 0.001
paramsList$optimisation$maxeval = 10000
paramsList$optimisation$maxtime = 60*5
N = 10
allRes = list()
for (i in 1:N){
7
Res = CNORwrapFuzzy(CNOlistDREAM, DreamModel, paramsList=paramsList,
verbose=TRUE)
allRes[[i]] = Res
}
summary = compileMultiRes(allRes, show=TRUE)
plotMeanFuzzyFit(0.01, summary$allFinalMSEs, allRes)
plotMeanFuzzyFit(0.5, summary$allFinalMSEs, allRes)
writeFuzzyNetwork(0.01, summary$allFinalMSEs, allRes, "output_dream")
library(readr)
prunnedPKN_sif <- read_delim("~/Desktop/PHONEMeS-Ariel/Very-Final/InitialAnalysis/postFeeder/prunnedPKN.sif.txt",
" ", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
View(prunnedPKN_sif)
net1 <- prunnedPKN_sif
library(readr)
prunnedPKN_sif <- read_delim("~/Desktop/PHONEMeS-Ariel/Very-Final/InitialAnalysis/preFeeder/prunnedPKN.sif.txt",
"\t", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
View(prunnedPKN_sif)
net2 <-prunnedPKN_sif
View(net1)
View(net2)
?format
format(1810032000, scientific = FALSE)
format(0.000003, scientific = FALSE)
format(0.000003, scientific = TRUE)
format(0.000003, scientific = FALSE)
2^20
intToBits(2^20)
intToBits(1)
intToBits(1)[1:20]
intToBits(2^15)[1:20]
length(intToBits(2^20))
intToBits(2^20, 20)
intToBits(2^20)
intToBits(1377)
intToBits(1)
remove.packages(pkgs = "CellNOptR")
remove.packages(CellNOptR)
remove.packages(CNORode2017)
remove.packages("CNORode2017")
remove.packages("CNORode2017")
remove.packages("MEIGOR")
install.packages("ggraph")
install.packages("ggraph")
library("ggraph")
library(CytobankAPI)
data<-matrix(1:9,nrow=3,ncol=3,byrow=TRUE)
colnames(data)<-c("Control","Patient1","Patient2")
rownames(data)<-c("Marker1","Marker2","Marker3")
#Normalizing patient data to control sample with cofactor of 5
asinnorm(data,1,5)
asinh(x = data)
?asinh
data
asinh(8/7)
asinh(7/8)
asinh(1/100)
asinnorm<-function(mat,col,cofactor){
norm<-asinh(mat[,col]/cofactor)
tmat<-asinh(mat/cofactor)
x<-tmat-norm
return(x)
}
data<-matrix(1:9,nrow=3,ncol=3,byrow=TRUE)
colnames(data)<-c("Control","Patient1","Patient2")
rownames(data)<-c("Marker1","Marker2","Marker3")
#Normalizing patient data to control sample with cofactor of 5
asinnorm(data,1,5)
data<-matrix(9:1,nrow=3,ncol=3,byrow=TRUE)
colnames(data)<-c("Control","Patient1","Patient2")
rownames(data)<-c("Marker1","Marker2","Marker3")
#Normalizing patient data to control sample with cofactor of 5
asinnorm(data,1,5)
library(CARNIVAL)
?runCARNIVAL
median(x = c(1, 2, 3, 4))
1.3/2
1.25/2
sd(rep(0.3, 3))
sd(rep(0, 0.1, 0.9))
sd(c(0, 0.1, 0.9))
1.6+0.7
2.3/4
+0.5
0.575+0.5
1.075/1.5
0.9+0.8+0.8+0.7
3.2/4
0.8+0.33
1.13/0.33
1.13/1.33
0.2+0.15+0.1+0.1
0.55/4
0.1375+0.5
0.6375/1.5
load(file = "~/Desktop/Ariel-Final/Project-15/PHONEMeS/PHONEMeS/PHONEMeS_01_10%/resList_1.RData")
resList[[1]]
314-245
kk = resList[[1]][[2]]
View(kk)
nrow(resList[[1]][[1]])
nrow(resList[[1]][[2]])
kk1 = resList[[1]][[1]]
kk2 = resList[[1]][[2]]
View(kk1)
View(kk2)
252-245
load(file = "~/Desktop/Ariel-Final/Project-15/PHONEMeS/PHONEMeS/PHONEMeS_01_10%/resList_1.RData")
rm(list = ls())
load(file = "~/Desktop/Ariel-Final/Project-15/PHONEMeS/PHONEMeS/PHONEMeS_01_10%/resList_1.RData")
kk1 resList[[40]][[1]]
kk1 <- resList[[40]][[1]]
kk2 <- resList[[40]][[2]]
256-247
View(kk2)
idx = c()
for(ii in 1:nrow(kk2)){if(length(intersect(which(kk1[,1]==kk2[ii, 1]), which(kk1[, 3]==kk2[ii, 3])))==0{idx=c(idx, ii)})}
idx
idx = c()
for(ii in 1:nrow(kk2)){if(length(intersect(which(kk1[,1]==kk2[ii, 1]), which(kk1[, 3]==kk2[ii, 3])))==0){idx=c(idx, ii)}}
idx
kk2[idx, ]
load(file = "~/Desktop/Ariel-Final/Project-15/Prepare-Data/cnolist.RData")
kk2[idx, ]
plotCNOlist(CNOlist = cnolist)
which(colnames(cnolist@signals$`0`)=="STAT3_S727")
ncol(cnolist@signals$`0`)
which(colnames(cnolist@signals$`0`)=="GSK3B_Y216")
which(colnames(cnolist@signals$`0`)=="RB1_T821")
load(file = "~/Desktop/Ariel-Final/Project-15/PHONEMeS/Build-BN-PKN/dataInput_pval_01_fc_10%.RData")
dataInput$resFC$RB1_T821
dataInput$resFC$RB1_T821
kk2[idx, ]
dataInput$resFC$STAT3_S727
which(colnames(cnolist@signals$`0`)=="STAT3_S727")
ncol(cnolist@signals$`0`)
dev.off()
load(file = "~/Desktop/Ariel-Final/Project-15/PHONEMeS/PHONEMeS/PHONEMeS_005_50%/resList_1.RData")
kk1 = resList[[1]][[1]]
kk2 = resList[[1]][[2]]
idx = c()
for(ii in 1:nrow(kk2)){if(length(intersect(x = which(kk1[,1]==kk2[ii,1]), y = which(kk1[,3]==kk2[ii,3])))==0){idx=c(idx,ii)}}
idx
kk2[idx, ]
rm(list = ls())
load(file = "~/Desktop/Ariel-Final/Project-15/PHONEMeS/PHONEMeS/PHONEMeS_005_50%/resList_1.RData")
kk1 = resList[[1]][[1]]
kk2 = resList[[1]][[2]]
idx = c()
for(ii in 1:nrow(kk2)){if(length(intersect(x = which(kk1[,1]==kk2[ii,1]), y = which(kk1[,3]==kk2[ii,3])))==0){idx=c(idx,ii)}}
idx
kk2[idx, ]
runif(n = 10, min = 1, max = 10000)
round(runif(n = 10, min = 1, max = 10000))
c(1690, 1467, 4237, 6188, 4752, 9308, 8693, 6533, 5186, 9726)
seeds = c(1690, 1467, 4237, 6188, 4752, 9308, 8693, 6533, 5186, 9726)
runif(n = 10, min = 1, max = 10000)
round(runif(n = 10, min = 1, max = 10000))
seeds = c(4651, 2361, 5206,  746, 5331, 8304, 6516, 5135, 9877, 9264)
library(CNORfeeder)
data(CNOlistDREAM,package="CellNOptR")
data(DreamModel,package="CellNOptR")
BTable <- makeBTables(CNOlist=CNOlistDREAM, k=2, measErr=c(0.1, 0))
BTable
Lrank <- linksRanking(CNOlist=CNOlistDREAM, measErr=c(0.1, 0), savefile=FALSE)
model<-preprocessing(data=CNOlistDREAM, model=DreamModel)
modelIntegr <- mapBTables2model(BTable=BTable,model=model,allInter=TRUE)
modelIntegr$reacID[modelIntegr$indexIntegr]
plotModel(model=modelIntegr, CNOlist=CNOlistDREAM, indexIntegr=modelIntegr$indexIntegr)
data(PPINigraph,package="CNORfeeder")
PPINigraph
PPINigraph[[1]]
PPINigraph[[2]]
PPINigraph[[3]]
PPINigraph[[4]]
PPINigraph[[5]]
PPINigraph[[6]]
?PPINigraph
data(UniprotIDdream,package="CNORfeeder")
modelIntegrWeight <- weighting(modelIntegr=modelIntegr, PKNmodel=DreamModel,
CNOlist=CNOlistDREAM, integrFac=10,
UniprotID=UniprotIDdream, PPI=PPINigraph)
library(devtools)
library(devtools)
devtools::install_github("davismcc/scater", build_vignettes = TRUE,ref = "RELEASE_3_6")
devtools::install_github("MarioniLab/scran", ref="RELEASE_3_6")
version
library(scater)
setwd("~/Documents/GitHub/FOSBE2019/Feeder-Analysis/")
library(CellNOptR)
library(MEIGOR)
library(CNORode)
library(doParallel)
library(readr)
library(infotheo)
library(igraph)
load(file = "../Results/Best-Solutions/opt_pars_feeder.RData")
attributes = map2cys(model = res$`Integrated-Model`$model, cnolist = res$CNOList, opt_pars = res$Parameters)
library(CellNOptR)
library(MEIGOR)
library(CNORode)
library(doParallel)
library(readr)
library(infotheo)
library(igraph)
load(file = "../Data/cnolist.RData")
load(file = "../Data/model.RData")
load(file = "../Data/database.RData")
load(file = "../Results/Best-Solutions/simData_initial.RData")
source("../Public/computeMSE.R")
source("../Public/computeMI.R")
source("../Public/runDynamicFeeder.R")
source("../Public/buildFeederObjectDynamic.R")
source("../Public/identifyMisfitIndeces.R")
source("../Public/map2cys.R")
source("../Public/integrateLinks.R")
source("../Public/preprocessingWeighted.R")
attributes = map2cys(model = res$`Integrated-Model`$model, cnolist = res$CNOList, opt_pars = res$Parameters)
attributes
res$Parameters$ssm_results$fbest
getwd()
rm(list = ls())
library(CellNOptR)
library(MEIGOR)
library(CNORode)
library(doParallel)
library(readr)
library(infotheo)
library(igraph)
load(file = "../Data/cnolist.RData")
load(file = "../Data/model.RData")
load(file = "../Data/database.RData")
load(file = "../Results/Best-Solutions/simData_initial.RData")
source("../Public/computeMSE.R")
source("../Public/computeMI.R")
source("../Public/runDynamicFeeder.R")
source("../Public/buildFeederObjectDynamic.R")
source("../Public/identifyMisfitIndices.R")
source("../Public/map2cys.R")
source("../Public/integrateLinks.R")
source("../Public/preprocessingWeighted.R")
rm(list = ls())
library(CellNOptR)
library(MEIGOR)
library(CNORode)
library(doParallel)
library(readr)
library(infotheo)
library(igraph)
load(file = "../Data/cnolist.RData")
load(file = "../Data/model.RData")
load(file = "../Data/database.RData")
load(file = "../Results/Best-Solutions/simData_initial.RData")
source("../Public/computeMSE.R")
source("../Public/computeMI.R")
source("../Public/runDynamicFeeder.R")
source("../Public/buildFeederObjectDynamic.R")
source("../Public/identifyMisfitIndices.R")
source("../Public/map2cys.R")
source("../Public/integrateLinks.R")
source("../Public/preprocessingWeighted.R")
indices <- identifyMisfitIndices(cnolist = cnolist, model = model, simData = simData, mseThresh = 0.05168124) # 0.05168124 = 5% error threshold
object <- buildFeederObjectDynamic(model = model, cnolist = cnolist, database = database, indices = indices, pathLength = 4)
indices
source("../Public/buildFeederObjectDynamic.R")
pathLength = 4
if((pathLength < 1) || !is.numeric(pathLength)){
stop("Path length should be numeric and equal or greater to 1")
} else {
pathLength = pathLength + 1
}
if(!is.null(cuesPathLength)){
cuesPathLength = cuesPathLength + 1
}
cuesPathLength = NULL
loopLength = NULL
rm(list = ls())
library(CellNOptR)
library(MEIGOR)
library(CNORode)
library(doParallel)
library(readr)
library(infotheo)
library(igraph)
load(file = "../Data/cnolist.RData")
load(file = "../Data/model.RData")
load(file = "../Data/database.RData")
load(file = "../Results/Best-Solutions/simData_initial.RData")
source("../Public/computeMSE.R")
source("../Public/computeMI.R")
source("../Public/runDynamicFeeder.R")
source("../Public/buildFeederObjectDynamic.R")
source("../Public/identifyMisfitIndices.R")
source("../Public/map2cys.R")
source("../Public/integrateLinks.R")
source("../Public/preprocessingWeighted.R")
indices <- identifyMisfitIndices(cnolist = cnolist, model = model, simData = simData, mseThresh = 0.05168124) # 0.05168124 = 5% error threshold
object <- buildFeederObjectDynamic(model = model, cnolist = cnolist, database = database, indices = indices, pathLength = 4)
integratedModel = integrateLinks(feederObject = object, cnolist = cnolist, compression = TRUE, expansion = FALSE, database = database)
plotModel(model = integratedModel$model, CNOlist = cnolist, indexIntegr = integratedModel$integLinksIdx)
paramsSSm=defaultParametersSSm()
paramsSSm$local_solver = "DHC"
paramsSSm$maxtime = 15000;
paramsSSm$maxeval = Inf;
paramsSSm$atol=1e-6;
paramsSSm$reltol=1e-6;
paramsSSm$nan_fac=1000;
paramsSSm$dim_refset=30;
paramsSSm$n_diverse=1000;
paramsSSm$maxStepSize=Inf;
paramsSSm$maxNumSteps=10000;
paramsSSm$transfer_function = 4;
paramsSSm$lambda_tau=0.1
paramsSSm$lambda_k=0.01
paramsSSm$bootstrap=F
paramsSSm$SSpenalty_fac=10
paramsSSm$SScontrolPenalty_fac=10
set.seed(4381)
ode_parameters=createLBodeContPars(integratedModel$model, LB_n = 1, LB_k = 0,
LB_tau = 0, UB_n = 3, UB_k = 1, UB_tau = 1, default_n = 3,
default_k = 0.5, default_tau = 0.01, opt_n = FALSE, opt_k = TRUE,
opt_tau = TRUE, random = TRUE)
res = runDynamicFeeder(cnolist = cnolist, integratedModel = integratedModel, ode_parameters = ode_parameters, penFactor_k = 5, paramsSSm = paramsSSm)
load("../Results/Best-Solutions/opt_pars_feeder.RData")
attributes = map2cys(model = res$`Integrated-Model`$model, cnolist = res$CNOList, opt_pars = res$Parameters)
dev.off()
getwd()
rm(list = ls())
library(CellNOptR)
library(MEIGOR)
library(CNORode)
library(doParallel)
library(readr)
library(infotheo)
library(igraph)
load(file = "../Data/cnolist.RData")
load(file = "../Data/model.RData")
load(file = "../Data/database.RData")
load(file = "../Results/Best-Solutions/simData_initial.RData")
source("../Public/computeMSE.R")
source("../Public/computeMI.R")
source("../Public/runDynamicFeeder.R")
source("../Public/buildFeederObjectDynamic.R")
source("../Public/identifyMisfitIndices.R")
source("../Public/map2cys.R")
source("../Public/integrateLinks.R")
source("../Public/preprocessingWeighted.R")
indices <- identifyMisfitIndices(cnolist = cnolist, model = model, simData = simData, mseThresh = 0.05168124) # 0.05168124 = 5% error threshold
object <- buildFeederObjectDynamic(model = model, cnolist = cnolist, database = database, indices = indices, pathLength = 4)
integratedModel = integrateLinks(feederObject = object, cnolist = cnolist, compression = TRUE, expansion = FALSE, database = database)
plotModel(model = integratedModel$model, CNOlist = cnolist, indexIntegr = integratedModel$integLinksIdx)
## Parameter Optimization
# essm
paramsSSm=defaultParametersSSm()
paramsSSm$local_solver = "DHC"
paramsSSm$maxtime = 15000;
paramsSSm$maxeval = Inf;
paramsSSm$atol=1e-6;
paramsSSm$reltol=1e-6;
paramsSSm$nan_fac=1000;
paramsSSm$dim_refset=30;
paramsSSm$n_diverse=1000;
paramsSSm$maxStepSize=Inf;
paramsSSm$maxNumSteps=10000;
paramsSSm$transfer_function = 4;
paramsSSm$lambda_tau=0.1
paramsSSm$lambda_k=0.01
paramsSSm$bootstrap=F
paramsSSm$SSpenalty_fac=10
paramsSSm$SScontrolPenalty_fac=10
set.seed(4381)
# set initial parameters
ode_parameters=createLBodeContPars(integratedModel$model, LB_n = 1, LB_k = 0,
LB_tau = 0, UB_n = 3, UB_k = 1, UB_tau = 1, default_n = 3,
default_k = 0.5, default_tau = 0.01, opt_n = FALSE, opt_k = TRUE,
opt_tau = TRUE, random = TRUE)
res = runDynamicFeeder(cnolist = cnolist, integratedModel = integratedModel, ode_parameters = ode_parameters, penFactor_k = 5, paramsSSm = paramsSSm)
load(file = "../Results/Best-Solutions/opt_pars_feeder.RData")
attributes = map2cys(model = res$`Integrated-Model`$model, cnolist = res$CNOList, opt_pars = res$Parameters)
kk1=attributes$`Edge Attributes`
kk2=attributes$`Node Attributes`
View(kk1)
View(kk2)
plotLBodeFitness(cnolist = res$CNOList, model = res$`Integrated-Model`$model, ode_parameters = res$Parameters, transfer_function = 4)
plotModel(model = res$`Integrated-Model`$model, CNOlist = res$CNOList, indexIntegr = res$`Integrated-Model`$integLinksIdx)
dev.off()
