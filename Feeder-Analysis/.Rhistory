# attributes = map2cys(model = model, cnolist = cnolist, opt_pars = opt_pars_initial)
#
# write.table(x = attributes$`Edge Attributes`, file = "../Results/Plots/Initial-Model/initial_model_edge_attributes.txt", quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
# write.table(x = attributes$`Node Attributes`, file = "../Results/Plots/Initial-Model/initial_model_node_attributes.txt", quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
#
# simData = plotLBodeFitness(cnolist = cnolist, model = model, ode_parameters = opt_pars_initial, transfer_function = 4)
# save(simData, file = "../Results/Best-Solutions/simData_initial.RData")
rm(list = ls())
load(file = "opt1.RData")
opt1 = opt_pars_initial
load(file = "opt2.RData")
opt2 = opt_pars_initial
rm(opt_pars_initial)
opt1$ssm_results$fbest
opt2$ssm_results$fbest
opt1$parValues==opt2$parValues
opt1$parValues
opt2$parValues
3600*4
rm(list = ls())
load(file = "../Data/cnolist.RData")
load(file = "../Data/database.RData")
load(file = "../Data/model.RData")
load(file = "opt1.RData")
plotLBodeFitness(cnolist = cnolist, model = model, ode_parameters = opt_pars_initial, transfer_function = 4)
setwd("~/Documents/GitHub/FOSBE2019/Initial-Analysis/")
setwd("~/Documents/GitHub/FOSBE2019/Feeder-Analysis/")
library(CellNOptR)
library(MEIGOR)
library(CNORode)
library(doParallel)
library(readr)
library(infotheo)
library(igraph)
load(file = "../Results/Best-Solutions/opt_pars_initial.RData")
load(file = "../Data/cnolist.RData")
load(file = "../Data/model.RData")
# model = preprocessing(data = cnolist, model = pknmodel, compression = TRUE, expansion = FALSE)
source("../Public/aicCNO.R")
initial = aicCNO(model = model, cnolist = cnolist, opt_pars = opt_pars_initial)
initialAIC = initial$AIC
rm(opt_pars_initial)
mm = matrix(data = , nrow = 1, ncol = 3)
# fits = c("1", "2", "5", "10", "20")
fits = c("1", "5", "10", "20")
pL = c("1", "2", "3", "4", "Inf")
penalty = c("2", "5", "10", "50", "100")
for(ii in 1:length(fits)){
for(jj in 1:length(pL)){
for(kk in 1:length(penalty)){
mm = rbind(mm, t(as.matrix(c(fits[ii], pL[jj], penalty[kk]))))
}
}
}
mm = mm[-1, ]
# save(mm, file = "Plots/indecesMatrix.RData")
idxBestAIC = NULL
aicBest = 100000 #we set an initial aicBest value big enough to compare with the aic scores for each integrated model we have evaluated
aicScores = c()
bicScores = c()
for(ii in 1:nrow(mm)){
currFile = paste0("../Results/Cluster-Results/res_feeder_", mm[ii, 1], "_", mm[ii, 2], "_", mm[ii, 3], ".RData")
if(file.exists(currFile)){
load(file = currFile)
score = aicCNO(model = res$`Integrated-Model`$model, cnolist = res$CNOList, opt_pars = res$Parameters)
aicScores = c(aicScores, score$AIC)
bicScores = c(bicScores, score$BIC)
if(score$AIC < aicBest){
aicBest = score$AIC
idxBestAIC = ii
# save(res, file = "../Results/Best-Solutions/opt_pars_feeder.RData")
}
}
}
mm
ii
ii=1
currFile = paste0("../Results/Cluster-Results/res_feeder_", mm[ii, 1], "_", mm[ii, 2], "_", mm[ii, 3], ".RData")
currFile
getwd()
file.exists(currFile)
ii=2
currFile = paste0("../Results/Cluster-Results/res_feeder_", mm[ii, 1], "_", mm[ii, 2], "_", mm[ii, 3], ".RData")
currFile
mm
ii=36
currFile = paste0("../Results/Cluster-Results/res_feeder_", mm[ii, 1], "_", mm[ii, 2], "_", mm[ii, 3], ".RData")
file.exists(currFile)
load(file = currFile)
score = aicCNO(model = res$`Integrated-Model`$model, cnolist = res$CNOList, opt_pars = res$Parameters)
score
rm(res)
load(file = currFile)
plotLBodeFitness(cnolist = res$CNOList, model = res$`Integrated-Model`, ode_parameters = res$Parameters, transfer_function = 4)
ii
rm(list = ls())
library(CellNOptR)
library(MEIGOR)
library(CNORode)
library(doParallel)
library(readr)
library(infotheo)
library(igraph)
load(file = "../Results/Best-Solutions/opt_pars_initial.RData")
load(file = "../Data/cnolist.RData")
load(file = "../Data/model.RData")
source("../Public/aicCNO.R")
initial = aicCNO(model = model, cnolist = cnolist, opt_pars = opt_pars_initial)
initialAIC = initial$AIC
rm(opt_pars_initial)
mm = matrix(data = , nrow = 1, ncol = 3)
fits = c("1", "5", "10", "20")
pL = c("1", "2", "3", "4", "Inf")
penalty = c("2", "5", "10", "50", "100")
for(ii in 1:length(fits)){
for(jj in 1:length(pL)){
for(kk in 1:length(penalty)){
mm = rbind(mm, t(as.matrix(c(fits[ii], pL[jj], penalty[kk]))))
}
}
}
mm = mm[-1, ]
idxBestAIC = NULL
aicBest = 100000 #we set an initial aicBest value big enough to compare with the aic scores for each integrated model we have evaluated
aicScores = c()
ii=36
currFile = paste0("../Results/Cluster-Results/res_feeder_", mm[ii, 1], "_", mm[ii, 2], "_", mm[ii, 3], ".RData")
file.exists(currFile)
load(file = currFile)
plotLBodeFitness(cnolist = res$CNOList, model = res$`Integrated-Model`, ode_parameters = res$Parameters, transfer_function = 4)
getwd()
ii
currFile = paste0("../Results/Cluster-Results/res_feeder_", mm[ii, 1], "_", mm[ii, 2], "_", mm[ii, 3], ".RData")
load(file = currFile)
plotLBodeFitness(cnolist = res$CNOList, model = res$`Integrated-Model`$model, ode_parameters = res$Parameters, transfer_function = 4)
dev.off()
model = res$`Integrated-Model`$model
cnolist = res$CNOList
opt_pars = res$Parameters
simData = plotLBodeFitness(cnolist = cnolist, model = model, ode_parameters = opt_pars, transfer_function = transfer_function)
transfer_function = 4
simData = plotLBodeFitness(cnolist = cnolist, model = model, ode_parameters = opt_pars, transfer_function = transfer_function)
rm(list = ls())
dev.off()
getwd()
library(CellNOptR)
library(MEIGOR)
library(CNORode)
library(doParallel)
library(readr)
library(infotheo)
library(igraph)
load(file = "../Results/Best-Solutions/opt_pars_initial.RData")
load(file = "../Data/cnolist.RData")
load(file = "../Data/model.RData")
source("../Public/aicCNO.R")
initial = aicCNO(model = model, cnolist = cnolist, opt_pars = opt_pars_initial)
initialAIC = initial$AIC
rm(opt_pars_initial)
mm = matrix(data = , nrow = 1, ncol = 3)
fits = c("1", "5", "10", "20")
pL = c("1", "2", "3", "4", "Inf")
penalty = c("2", "5", "10", "50", "100")
for(ii in 1:length(fits)){
for(jj in 1:length(pL)){
for(kk in 1:length(penalty)){
mm = rbind(mm, t(as.matrix(c(fits[ii], pL[jj], penalty[kk]))))
}
}
}
mm = mm[-1, ]
idxBestAIC = NULL
aicBest = 100000 #we set an initial aicBest value big enough to compare with the aic scores for each integrated model we have evaluated
aicScores = c()
currFile = paste0("../Results/Cluster-Results/res_feeder_", mm[ii, 1], "_", mm[ii, 2], "_", mm[ii, 3], ".RData")
ii
ii=36
currFile = paste0("../Results/Cluster-Results/res_feeder_", mm[ii, 1], "_", mm[ii, 2], "_", mm[ii, 3], ".RData")
file.exists(currFile)
load(file = currFile)
score = aicCNO(model = res$`Integrated-Model`$model, cnolist = res$CNOList, opt_pars = res$Parameters)
file = "../Results/Best-Solutions/opt_pars_feeder.RData"
rm(list = ls())
getwd()
library(CellNOptR)
library(MEIGOR)
library(CNORode)
library(doParallel)
library(readr)
library(infotheo)
library(igraph)
load(file = "../Analysis/opt_pars_initial.RData")
load(file = "../Data/cnolist.RData")
load(file = "../Data/model.RData")
# model = preprocessing(data = cnolist, model = pknmodel, compression = TRUE, expansion = FALSE)
source("aicCNO.R")
initial = aicCNO(model = model, cnolist = cnolist, opt_pars = opt_pars_initial)
initialAIC = initial$AIC
initialBIC = initial$BIC
rm(opt_pars_initial)
mm = matrix(data = , nrow = 1, ncol = 3)
# fits = c("1", "2", "5", "10", "20")
fits = c("1", "5", "10", "20")
pL = c("1", "2", "3", "4", "Inf")
penalty = c("2", "5", "10", "50", "100")
for(ii in 1:length(fits)){
for(jj in 1:length(pL)){
for(kk in 1:length(penalty)){
mm = rbind(mm, t(as.matrix(c(fits[ii], pL[jj], penalty[kk]))))
}
}
}
mm = mm[-1, ]
# save(mm, file = "Plots/indecesMatrix.RData")
idxBestAIC = NULL
idxBestBIC = NULL
idxBestFit = NULL
aicBest = 100000
bicBest = 100000
fitBest = 100000
aicScores = c()
bicScores = c()
for(ii in 1:nrow(mm)){
# currFile = paste0("Results/misFit_", mm[ii, 1], "/pL_", mm[ii, 2], "/res_feeder_", mm[ii, 1], "_", mm[ii, 2], "_", mm[ii, 3], ".RData")
currFile = paste0("Results/res_feeder_", mm[ii, 1], "_", mm[ii, 2], "_", mm[ii, 3], ".RData")
if(file.exists(currFile)){
load(file = currFile)
score = aicCNO(model = res$`Integrated-Model`$model, cnolist = res$CNOList, opt_pars = res$Parameters)
aicScores = c(aicScores, score$AIC)
bicScores = c(bicScores, score$BIC)
if(score$AIC < aicBest){
aicBest = score$AIC
idxBestAIC = ii
# save(res, file = "../Results/Best-Solutions/opt_pars_feeder.RData")
# save(idxBestAIC, file = "Plots/idxBestAIC.RData")
#
# pdf(file = paste0("Plots/aic_fit.pdf"), width = 22, height = 10)
# plotLBodeFitness(cnolist = res$CNOList, model = res$`Integrated-Model`$`Integrated-Model`$model, ode_parameters = res$Parameters, transfer_function = 4)
# dev.off()
#
# pdf(file = paste0("Plots/aic_model.pdf"), width = 18, height = 14)
# plotModel(model = res$`Integrated-Model`$model, CNOlist = res$CNOList, indexIntegr = res$`Integrated-Model`$integLinksIdx)
# dev.off()
}
if(score$BIC < bicBest){
bicBest = score$BIC
idxBestBIC = ii
# save(res, file = "Plots/res_bic.RData")
# save(idxBestBIC, file = "Plots/idxBestBIC.RData")
#
# pdf(file = paste0("Plots/bic_fit.pdf"), width = 22, height = 10)
# plotLBodeFitness(cnolist = res$CNOList, model = res$`Integrated-Model`$model, ode_parameters = res$Parameters, transfer_function = 4)
# dev.off()
#
# pdf(file = paste0("Plots/bic_model.pdf"), width = 18, height = 14)
# plotModel(model = res$`Integrated-Model`$model, CNOlist = res$CNOList, indexIntegr = res$`Integrated-Model`$integLinksIdx)
# dev.off()
}
if(res$Parameters$ssm_results$fbest < fitBest){
fitBest = res$Parameters$ssm_results$fbest
idxBestFit = ii
# save(res, file = "Plots/res_fit.RData")
# save(idxBestFit, file = "Plots/idxBestFit.RData")
#
# pdf(file = paste0("Plots/rss_fit.pdf"), width = 22, height = 10)
# plotLBodeFitness(cnolist = res$CNOList, model = res$`Integrated-Model`$model, ode_parameters = res$Parameters, transfer_function = 4)
# dev.off()
#
# pdf(file = paste0("Plots/rss_model.pdf"), width = 18, height = 14)
# plotModel(model = res$`Integrated-Model`$model, CNOlist = res$CNOList, indexIntegr = res$`Integrated-Model`$integLinksIdx)
# dev.off()
}
}
}
rm(list = ls())
load(file = "../Results/Best-Solutions/opt_pars_initial.RData")
load(file = "../Data/cnolist.RData")
load(file = "../Data/model.RData")
source("aicCNO.R")
initial = aicCNO(model = model, cnolist = cnolist, opt_pars = opt_pars_initial)
source("../Public/aicCNO.R")
initial = aicCNO(model = model, cnolist = cnolist, opt_pars = opt_pars_initial)
initialAIC = initial$AIC
initialBIC = initial$BIC
rm(opt_pars_initial)
mm = matrix(data = , nrow = 1, ncol = 3)
fits = c("1", "5", "10", "20")
pL = c("1", "2", "3", "4", "Inf")
penalty = c("2", "5", "10", "50", "100")
for(ii in 1:length(fits)){
for(jj in 1:length(pL)){
for(kk in 1:length(penalty)){
mm = rbind(mm, t(as.matrix(c(fits[ii], pL[jj], penalty[kk]))))
}
}
}
mm = mm[-1, ]
idxBestAIC = NULL
idxBestBIC = NULL
idxBestFit = NULL
aicBest = 100000
bicBest = 100000
fitBest = 100000
aicScores = c()
bicScores = c()
for(ii in 1:nrow(mm)){
# currFile = paste0("Results/misFit_", mm[ii, 1], "/pL_", mm[ii, 2], "/res_feeder_", mm[ii, 1], "_", mm[ii, 2], "_", mm[ii, 3], ".RData")
currFile = paste0("Results/res_feeder_", mm[ii, 1], "_", mm[ii, 2], "_", mm[ii, 3], ".RData")
if(file.exists(currFile)){
load(file = currFile)
score = aicCNO(model = res$`Integrated-Model`$model, cnolist = res$CNOList, opt_pars = res$Parameters)
aicScores = c(aicScores, score$AIC)
bicScores = c(bicScores, score$BIC)
if(score$AIC < aicBest){
aicBest = score$AIC
idxBestAIC = ii
# save(res, file = "../Results/Best-Solutions/opt_pars_feeder.RData")
# save(idxBestAIC, file = "Plots/idxBestAIC.RData")
#
# pdf(file = paste0("Plots/aic_fit.pdf"), width = 22, height = 10)
# plotLBodeFitness(cnolist = res$CNOList, model = res$`Integrated-Model`$`Integrated-Model`$model, ode_parameters = res$Parameters, transfer_function = 4)
# dev.off()
#
# pdf(file = paste0("Plots/aic_model.pdf"), width = 18, height = 14)
# plotModel(model = res$`Integrated-Model`$model, CNOlist = res$CNOList, indexIntegr = res$`Integrated-Model`$integLinksIdx)
# dev.off()
}
if(score$BIC < bicBest){
bicBest = score$BIC
idxBestBIC = ii
# save(res, file = "Plots/res_bic.RData")
# save(idxBestBIC, file = "Plots/idxBestBIC.RData")
#
# pdf(file = paste0("Plots/bic_fit.pdf"), width = 22, height = 10)
# plotLBodeFitness(cnolist = res$CNOList, model = res$`Integrated-Model`$model, ode_parameters = res$Parameters, transfer_function = 4)
# dev.off()
#
# pdf(file = paste0("Plots/bic_model.pdf"), width = 18, height = 14)
# plotModel(model = res$`Integrated-Model`$model, CNOlist = res$CNOList, indexIntegr = res$`Integrated-Model`$integLinksIdx)
# dev.off()
}
if(res$Parameters$ssm_results$fbest < fitBest){
fitBest = res$Parameters$ssm_results$fbest
idxBestFit = ii
# save(res, file = "Plots/res_fit.RData")
# save(idxBestFit, file = "Plots/idxBestFit.RData")
#
# pdf(file = paste0("Plots/rss_fit.pdf"), width = 22, height = 10)
# plotLBodeFitness(cnolist = res$CNOList, model = res$`Integrated-Model`$model, ode_parameters = res$Parameters, transfer_function = 4)
# dev.off()
#
# pdf(file = paste0("Plots/rss_model.pdf"), width = 18, height = 14)
# plotModel(model = res$`Integrated-Model`$model, CNOlist = res$CNOList, indexIntegr = res$`Integrated-Model`$integLinksIdx)
# dev.off()
}
}
}
for(ii in 1:nrow(mm)){
# currFile = paste0("Results/misFit_", mm[ii, 1], "/pL_", mm[ii, 2], "/res_feeder_", mm[ii, 1], "_", mm[ii, 2], "_", mm[ii, 3], ".RData")
currFile = paste0("../Results/Cluster-Results/res_feeder_", mm[ii, 1], "_", mm[ii, 2], "_", mm[ii, 3], ".RData")
if(file.exists(currFile)){
load(file = currFile)
score = aicCNO(model = res$`Integrated-Model`$model, cnolist = res$CNOList, opt_pars = res$Parameters)
aicScores = c(aicScores, score$AIC)
bicScores = c(bicScores, score$BIC)
if(score$AIC < aicBest){
aicBest = score$AIC
idxBestAIC = ii
# save(res, file = "../Results/Best-Solutions/opt_pars_feeder.RData")
# save(idxBestAIC, file = "Plots/idxBestAIC.RData")
#
# pdf(file = paste0("Plots/aic_fit.pdf"), width = 22, height = 10)
# plotLBodeFitness(cnolist = res$CNOList, model = res$`Integrated-Model`$`Integrated-Model`$model, ode_parameters = res$Parameters, transfer_function = 4)
# dev.off()
#
# pdf(file = paste0("Plots/aic_model.pdf"), width = 18, height = 14)
# plotModel(model = res$`Integrated-Model`$model, CNOlist = res$CNOList, indexIntegr = res$`Integrated-Model`$integLinksIdx)
# dev.off()
}
if(score$BIC < bicBest){
bicBest = score$BIC
idxBestBIC = ii
# save(res, file = "Plots/res_bic.RData")
# save(idxBestBIC, file = "Plots/idxBestBIC.RData")
#
# pdf(file = paste0("Plots/bic_fit.pdf"), width = 22, height = 10)
# plotLBodeFitness(cnolist = res$CNOList, model = res$`Integrated-Model`$model, ode_parameters = res$Parameters, transfer_function = 4)
# dev.off()
#
# pdf(file = paste0("Plots/bic_model.pdf"), width = 18, height = 14)
# plotModel(model = res$`Integrated-Model`$model, CNOlist = res$CNOList, indexIntegr = res$`Integrated-Model`$integLinksIdx)
# dev.off()
}
if(res$Parameters$ssm_results$fbest < fitBest){
fitBest = res$Parameters$ssm_results$fbest
idxBestFit = ii
# save(res, file = "Plots/res_fit.RData")
# save(idxBestFit, file = "Plots/idxBestFit.RData")
#
# pdf(file = paste0("Plots/rss_fit.pdf"), width = 22, height = 10)
# plotLBodeFitness(cnolist = res$CNOList, model = res$`Integrated-Model`$model, ode_parameters = res$Parameters, transfer_function = 4)
# dev.off()
#
# pdf(file = paste0("Plots/rss_model.pdf"), width = 18, height = 14)
# plotModel(model = res$`Integrated-Model`$model, CNOlist = res$CNOList, indexIntegr = res$`Integrated-Model`$integLinksIdx)
# dev.off()
}
}
}
rm(list = ls())
getwd()
setwd("~/Documents/GitHub/FOSBE2019/Initial-Analysis/")
library(CellNOptR)
library(MEIGOR)
library(CNORode2017)
library(doParallel)
library(readr)
load(file = "../Data/cnolist.RData")
load(file = "../Data/database.RData")
load(file = "../Data/model.RData")
ode_parameters=createLBodeContPars(model, LB_n = 1, LB_k = 0,
LB_tau = 0, UB_n = 3, UB_k = 1, UB_tau = 1, default_n = 3,
default_k = 0.5, default_tau = 0.01, opt_n = FALSE, opt_k = TRUE,
opt_tau = TRUE, random = TRUE)
paramsSSm=defaultParametersSSm()
paramsSSm$local_solver = "DHC"
paramsSSm$maxtime = 7200;
paramsSSm$maxeval = Inf;
paramsSSm$atol=1e-6;
paramsSSm$reltol=1e-6;
paramsSSm$nan_fac=1000;
paramsSSm$dim_refset=30;
paramsSSm$n_diverse=1000;
paramsSSm$maxStepSize=Inf;
paramsSSm$maxNumSteps=10000;
paramsSSm$transfer_function = 4;
paramsSSm$lambda_tau=0.1
paramsSSm$lambda_k=0.01
paramsSSm$bootstrap=F
paramsSSm$SSpenalty_fac=10
paramsSSm$SScontrolPenalty_fac=10
opt_pars_initial=parEstimationLBode(cnolist, model, method="essm", ode_parameters=ode_parameters, paramsSSm=paramsSSm)
rm(list = ls())
getwd()
setwd("/Users/enio.gjerga/Documents/GitHub/FOSBE2019/Feeder-Analysis/")
library(CellNOptR)
library(MEIGOR)
library(CNORode)
library(doParallel)
library(readr)
library(infotheo)
library(igraph)
load(file = "../Results/Best-Solutions/opt_pars_initial.RData")
load(file = "../Data/cnolist.RData")
load(file = "../Data/model.RData")
source("../Public/aicCNO.R")
initial = aicCNO(model = model, cnolist = cnolist, opt_pars = opt_pars_initial)
initialAIC = initial$AIC
initialBIC = initial$BIC
rm(opt_pars_initial)
mm = matrix(data = , nrow = 1, ncol = 3)
fits = c("1", "5", "10", "20")
pL = c("1", "2", "3", "4", "Inf")
penalty = c("2", "5", "10", "50", "100")
for(ii in 1:length(fits)){
for(jj in 1:length(pL)){
for(kk in 1:length(penalty)){
mm = rbind(mm, t(as.matrix(c(fits[ii], pL[jj], penalty[kk]))))
}
}
}
mm = mm[-1, ]
idxBestAIC = NULL
idxBestBIC = NULL
idxBestFit = NULL
aicBest = 100000
bicBest = 100000
fitBest = 100000
aicScores = c()
bicScores = c()
ii=37
currFile = paste0("../Results/Cluster-Results/res_feeder_", mm[ii, 1], "_", mm[ii, 2], "_", mm[ii, 3], ".RData")
file.exists(currFile)
load(file = currFile)
score = aicCNO(model = res$`Integrated-Model`$model, cnolist = res$CNOList, opt_pars = res$Parameters)
dev.off()
rm(list = ls())
getwd()
setwd("~/Documents/GitHub/FOSBE2019/Feeder-Analysis/")
library(CellNOptR)
library(MEIGOR)
library(CNORode)
library(doParallel)
library(readr)
library(infotheo)
library(igraph)
load(file = "../Data/cnolist.RData")
load(file = "../Data/model.RData")
load(file = "../Data/database.RData")
load(file = "../Results/Best-Solutions/simData_initial.RData")
source("../Public/computeMSE.R")
source("../Public/computeMI.R")
source("../Public/runDynamicFeeder.R")
source("../Public/buildFeederObjectDynamic.R")
source("../Public/identifyMisfitIndeces.R")
source("../Public/map2cys.R")
source("../Public/integrateLinks.R")
source("../Public/preprocessingWeighted.R")
indeces <- identifyMisfitIndeces(cnolist = cnolist, model = model, simData = simData, mseThresh = 0.06291897) # 0.06291897 = 5% error threshold
object <- buildFeederObjectDynamic(model = model, cnolist = cnolist, database = database, indeces = indeces, pathLength = Inf)
integratedModel = integrateLinks(feederObject = object, cnolist = cnolist, compression = TRUE, expansion = FALSE, database = database)
plotModel(model = integratedModel$model, CNOlist = cnolist, indexIntegr = integratedModel$integLinksIdx)
