rm(list = ls())
getwd()
setwd("/Users/enio.gjerga/Desktop/Feeder_CPT/HPN-DREAM-PREPROCESSED/Project-9/Data/")
library(CellNOptR)
library(readr)
library(CellNOptR)
library(readr)
merge_hpn_cmpr_CS <- read_delim("merge_hpn_cmpr_CS.sif", "\t", escape_double = FALSE, col_names = FALSE, trim_ws = TRUE)
data<-read.csv(file="UACC812Refined-Remove-ready.csv",header=TRUE,sep=',',fill=TRUE,as.is=TRUE,check.names=FALSE)
TRcol<-grep(pattern="TR:",x=colnames(data),ignore.case=FALSE)
DAcol<-grep(pattern="DA:",x=colnames(data),ignore.case=FALSE)
DVcol<-grep(pattern="DV:",x=colnames(data),ignore.case=FALSE)
uniqueExp <- unique(data[, TRcol])
TRcol
data[, TRcol]
library(CellNOptR)
library(readr)
data<-read.csv(file="UACC812Refined-Remove-ready.csv",header=TRUE,sep=',',fill=TRUE,as.is=TRUE,check.names=FALSE)
TRcol<-grep(pattern="TR:",x=colnames(data),ignore.case=FALSE)
DAcol<-grep(pattern="DA:",x=colnames(data),ignore.case=FALSE)
DVcol<-grep(pattern="DV:",x=colnames(data),ignore.case=FALSE)
uniqueExp <- unique(data[, TRcol])
uniqueExp
library(CellNOptR)
library(readr)
# read the data (except header) and convert to data.frame
data<-read.csv(file="UACC812Refined-Remove-ready.csv",header=TRUE,sep=',',fill=TRUE,as.is=TRUE,check.names=FALSE)
TRcol<-grep(pattern="TR:",x=colnames(data),ignore.case=FALSE)
DAcol<-grep(pattern="DA:",x=colnames(data),ignore.case=FALSE)
DVcol<-grep(pattern="DV:",x=colnames(data),ignore.case=FALSE)
# Identifying the unique experiments and setting the control at the top
uniqueExp <- unique(data[, TRcol])
uniqueExp <- uniqueExp[c(7, 2, 3, 4, 5, 6, 1, 8:18), ]
expID <- 1:nrow(uniqueExp)
timeID <- sort(unique(data$`DA:ALL`))
trackID <- c()
for(ii in 1:length(timeID)){
for(jj in 1:length(expID)){
for(kk in 1:nrow(data)){
if((all(uniqueExp[ii, ]==data[jj, TRcol])) && (data$`DA:ALL`[kk]==timeID[ii])){
trackID <- c(trackID, kk)
}
}
}
}
dataSorted <- unique(data[trackID, ])
cNames <- colnames(dataSorted)
idx <- which(grepl(pattern = "DA:", x = cNames, fixed = TRUE))
dataSorted <- dataSorted[, -idx[-1]]
write.csv(x = dataSorted, file = "midas.csv", sep = ",", quote = FALSE)
cnolist <- CNOlist(data = "midas.csv", verbose = TRUE)
merge_hpn_cmpr_CS <- read_delim("merge_hpn_cmpr_CS.sif", "\t", escape_double = FALSE, col_names = FALSE, trim_ws = TRUE)
merge_hpn_cmpr_CS = merge_hpn_cmpr_CS[-which(merge_hpn_cmpr_CS$X3%in%colnames(cnolist@cues)), ]
write.table(x = as.matrix(merge_hpn_cmpr_CS), file = "remp.sif", quote = FALSE, sep = " ", row.names = FALSE, col.names = FALSE)
write.table(x = as.matrix(merge_hpn_cmpr_CS), file = "temp.sif", quote = FALSE, sep = " ", row.names = FALSE, col.names = FALSE)
pkn = readSIF(sifFile = "temp.sif")
file.remove("temp.sif")
model <- preprocessing(data = cnolist, model = pkn, compression = TRUE, expansion = FALSE)
plotModel(model = model, CNOlist = cnolist)
rm(list = ls())
getwd()
setwd("~/Desktop/Feeder_CPT/HPN-DREAM-PREPROCESSED/Project-9/Data/")
library(CellNOptR)
pkn <- readSIF(sifFile = "merge_hpn_cmpr_CS.sif")
data<-read.csv(file="UACC812Refined-Remove-ready.csv",header=TRUE,sep=',',fill=TRUE,as.is=TRUE,check.names=FALSE)
TRcol<-grep(pattern="TR:",x=colnames(data),ignore.case=FALSE)
DAcol<-grep(pattern="DA:",x=colnames(data),ignore.case=FALSE)
DVcol<-grep(pattern="DV:",x=colnames(data),ignore.case=FALSE)
uniqueExp <- unique(data[, TRcol])
uniqueExp <- uniqueExp[c(7, 2, 3, 4, 5, 6, 1, 8:18), ]
expID <- 1:nrow(uniqueExp)
timeID <- sort(unique(data$`DA:ALL`))
trackID <- c()
for(ii in 1:length(timeID)){
for(jj in 1:length(expID)){
for(kk in 1:nrow(data)){
if((all(uniqueExp[ii, ]==data[jj, TRcol])) && (data$`DA:ALL`[kk]==timeID[ii])){
trackID <- c(trackID, kk)
}
}
}
}
dataSorted <- unique(data[trackID, ])
cNames <- colnames(dataSorted)
idx <- which(grepl(pattern = "DA:", x = cNames, fixed = TRUE))
dataSorted <- dataSorted[, -idx[-1]]
write.csv(x = dataSorted, file = "midas.csv", sep = ",", quote = FALSE)
cnolist <- CNOlist(data = "midas.csv", verbose = TRUE)
plotModel(model = pkn, CNOlist = cnolist)
model <- preprocessing(data = cnolist, model = pkn, compression = TRUE, expansion = FALSE)
plotModel(model = model, CNOlist = cnolist)
modelSIF <- model2sif(model = model)
measured <- colnames(cnolist@signals$`0`)
sites2keep <- measured[c(13, 16, 19, 2, 9, 14, 3, 12, 21, 1, 5, 6, 8, 15)]
library(CellNOptR)
pkn <- readSIF(sifFile = "cancer_cellLines_v4.sif")
cnolist <- CNOlist(data = "UACC812Refined-Remove-ready.csv", verbose = TRUE) # at this point getting an error and it needs to be fixed
data<-read.csv(file="UACC812Refined-Remove-ready.csv",header=TRUE,sep=',',fill=TRUE,as.is=TRUE,check.names=FALSE)
TRcol<-grep(pattern="TR:",x=colnames(data),ignore.case=FALSE)
DAcol<-grep(pattern="DA:",x=colnames(data),ignore.case=FALSE)
DVcol<-grep(pattern="DV:",x=colnames(data),ignore.case=FALSE)
uniqueExp <- unique(data[, TRcol])
uniqueExp <- uniqueExp[c(7, 2, 3, 4, 5, 6, 1, 8:18), ]
expID <- 1:nrow(uniqueExp)
timeID <- sort(unique(data$`DA:ALL`))
trackID <- c()
for(ii in 1:length(timeID)){
for(jj in 1:length(expID)){
for(kk in 1:nrow(data)){
if((all(uniqueExp[ii, ]==data[jj, TRcol])) && (data$`DA:ALL`[kk]==timeID[ii])){
trackID <- c(trackID, kk)
}
}
}
}
dataSorted <- unique(data[trackID, ])
cNames <- colnames(dataSorted)
idx <- which(grepl(pattern = "DA:", x = cNames, fixed = TRUE))
dataSorted <- dataSorted[, -idx[-1]]
write.csv(x = dataSorted, file = "midas.csv", sep = ",", quote = FALSE)
cnolist <- CNOlist(data = "midas.csv", verbose = TRUE)
plotModel(model = pkn, CNOlist = cnolist)
rm(list = ls())
library(CellNOptR)
pkn <- readSIF(sifFile = "merge_hpn_cmpr_CS.sif")
cnolist <- CNOlist(data = "UACC812Refined-Remove-ready.csv", verbose = TRUE) # at this point getting an error and it needs to be fixed
data<-read.csv(file="UACC812Refined-Remove-ready.csv",header=TRUE,sep=',',fill=TRUE,as.is=TRUE,check.names=FALSE)
TRcol<-grep(pattern="TR:",x=colnames(data),ignore.case=FALSE)
DAcol<-grep(pattern="DA:",x=colnames(data),ignore.case=FALSE)
DVcol<-grep(pattern="DV:",x=colnames(data),ignore.case=FALSE)
uniqueExp <- unique(data[, TRcol])
uniqueExp <- uniqueExp[c(7, 2, 3, 4, 5, 6, 1, 8:18), ]
expID <- 1:nrow(uniqueExp)
timeID <- sort(unique(data$`DA:ALL`))
trackID <- c()
for(ii in 1:length(timeID)){
for(jj in 1:length(expID)){
for(kk in 1:nrow(data)){
if((all(uniqueExp[ii, ]==data[jj, TRcol])) && (data$`DA:ALL`[kk]==timeID[ii])){
trackID <- c(trackID, kk)
}
}
}
}
dataSorted <- unique(data[trackID, ])
cNames <- colnames(dataSorted)
idx <- which(grepl(pattern = "DA:", x = cNames, fixed = TRUE))
dataSorted <- dataSorted[, -idx[-1]]
write.csv(x = dataSorted, file = "midas.csv", sep = ",", quote = FALSE)
cnolist <- CNOlist(data = "midas.csv", verbose = TRUE)
plotModel(model = pkn, CNOlist = cnolist)
model = pkn
modelSIF <- model2sif(model = model)
measured <- colnames(cnolist@signals$`0`)
sites2keep <- measured[c(13, 16, 19, 2, 9, 14, 3, 12, 21, 1, 5, 6, 8, 15)]
sites2keep
sites2remove <- setdiff(x = measured, y = sites2keep)
idx1 <- which(modelSIF[, 1]%in%sites2remove)
idx2 <- which(modelSIF[, 3]%in%sites2remove)
pknSIF <- modelSIF[-unique(c(idx1, idx2)), ]
write.table(x = pknSIF, file = "sif.txt", quote = FALSE, sep = " ", row.names = FALSE, col.names = FALSE)
model <- readSIF(sifFile = "sif.txt")
plotModel(model = model, CNOlist = cnolist)
idx <- which(colnames(cnolist@signals$`0`)%in%sites2remove)
for(ii in 1:length(cnolist@signals)){
cnolist@signals[[ii]] <- cnolist@signals[[ii]][, -idx]
cnolist@variances[[ii]] <- cnolist@variances[[ii]][, -idx]
}
temp = cnolist
model <- preprocessing(data = cnolist, model = model, compression = TRUE, expansion = FALSE)
colnames(cnolist@cues)
colnames(cnolist@stimuli)
rm(list = ls())
library(CellNOptR)
pkn <- readSIF(sifFile = "merge_hpn_cmpr_CS_NS.sif")
cnolist <- CNOlist(data = "UACC812Refined-Remove-ready.csv", verbose = TRUE) # at this point getting an error and it needs to be fixed
data<-read.csv(file="UACC812Refined-Remove-ready.csv",header=TRUE,sep=',',fill=TRUE,as.is=TRUE,check.names=FALSE)
TRcol<-grep(pattern="TR:",x=colnames(data),ignore.case=FALSE)
DAcol<-grep(pattern="DA:",x=colnames(data),ignore.case=FALSE)
DVcol<-grep(pattern="DV:",x=colnames(data),ignore.case=FALSE)
uniqueExp <- unique(data[, TRcol])
uniqueExp <- uniqueExp[c(7, 2, 3, 4, 5, 6, 1, 8:18), ]
expID <- 1:nrow(uniqueExp)
timeID <- sort(unique(data$`DA:ALL`))
trackID <- c()
for(ii in 1:length(timeID)){
for(jj in 1:length(expID)){
for(kk in 1:nrow(data)){
if((all(uniqueExp[ii, ]==data[jj, TRcol])) && (data$`DA:ALL`[kk]==timeID[ii])){
trackID <- c(trackID, kk)
}
}
}
}
dataSorted <- unique(data[trackID, ])
cNames <- colnames(dataSorted)
idx <- which(grepl(pattern = "DA:", x = cNames, fixed = TRUE))
dataSorted <- dataSorted[, -idx[-1]]
write.csv(x = dataSorted, file = "midas.csv", sep = ",", quote = FALSE)
cnolist <- CNOlist(data = "midas.csv", verbose = TRUE)
plotModel(model = pkn, CNOlist = cnolist)
model = pkn
modelSIF <- model2sif(model = model)
measured <- colnames(cnolist@signals$`0`)
model <- preprocessing(data = cnolist, model = pkn, compression = TRUE, expansion = FALSE)
plotModel(model = model, CNOlist = cnolist)
modelSIF <- model2sif(model = model)
measured <- colnames(cnolist@signals$`0`)
sites2keep <- measured[c(13, 16, 19, 2, 9, 14, 3, 12, 21, 1, 5, 6, 8, 15)]
sites2remove <- setdiff(x = measured, y = sites2keep)
idx1 <- which(modelSIF[, 1]%in%sites2remove)
idx2 <- which(modelSIF[, 3]%in%sites2remove)
pknSIF <- modelSIF[-unique(c(idx1, idx2)), ]
write.table(x = pknSIF, file = "sif.txt", quote = FALSE, sep = " ", row.names = FALSE, col.names = FALSE)
model <- readSIF(sifFile = "sif.txt")
plotModel(model = model, CNOlist = cnolist)
idx <- which(colnames(cnolist@signals$`0`)%in%sites2remove)
for(ii in 1:length(cnolist@signals)){
cnolist@signals[[ii]] <- cnolist@signals[[ii]][, -idx]
cnolist@variances[[ii]] <- cnolist@variances[[ii]][, -idx]
}
temp = cnolist
model <- preprocessing(data = cnolist, model = model, compression = TRUE, expansion = FALSE)
View(pknSIF)
cnolist@cues
source("fixCNOSpecies.R")
cnolist = fixCNOSpecies(cnolist = cnolist, model = model)
model <- preprocessing(data = cnolist, model = model, compression = TRUE, expansion = FALSE)
plotModel(model = model, CNOlist = cnolist)
rm(list = ls())
setwd("~/Desktop/Feeder_CPT/HPN-DREAM-PREPROCESSED/Project-9/Data/")
library(CellNOptR)
pkn <- readSIF(sifFile = "merge_hpn_cmpr_CS.sif")
cnolist <- CNOlist(data = "UACC812Refined-Remove-ready.csv", verbose = TRUE) # at this point getting an error and it needs to be fixed
data<-read.csv(file="UACC812Refined-Remove-ready.csv",header=TRUE,sep=',',fill=TRUE,as.is=TRUE,check.names=FALSE)
TRcol<-grep(pattern="TR:",x=colnames(data),ignore.case=FALSE)
DAcol<-grep(pattern="DA:",x=colnames(data),ignore.case=FALSE)
DVcol<-grep(pattern="DV:",x=colnames(data),ignore.case=FALSE)
uniqueExp <- unique(data[, TRcol])
uniqueExp <- uniqueExp[c(7, 2, 3, 4, 5, 6, 1, 8:18), ]
expID <- 1:nrow(uniqueExp)
timeID <- sort(unique(data$`DA:ALL`))
trackID <- c()
for(ii in 1:length(timeID)){
for(jj in 1:length(expID)){
for(kk in 1:nrow(data)){
if((all(uniqueExp[ii, ]==data[jj, TRcol])) && (data$`DA:ALL`[kk]==timeID[ii])){
trackID <- c(trackID, kk)
}
}
}
}
dataSorted <- unique(data[trackID, ])
cNames <- colnames(dataSorted)
idx <- which(grepl(pattern = "DA:", x = cNames, fixed = TRUE))
dataSorted <- dataSorted[, -idx[-1]]
write.csv(x = dataSorted, file = "midas.csv", sep = ",", quote = FALSE)
cnolist <- CNOlist(data = "midas.csv", verbose = TRUE)
plotModel(model = pkn, CNOlist = cnolist)
model <- preprocessing(data = cnolist, model = pkn, compression = TRUE, expansion = FALSE)
plotModel(model = model, CNOlist = cnolist)
modelSIF <- model2sif(model = model)
measured <- colnames(cnolist@signals$`0`)
sites2keep <- measured[c(13, 16, 19, 2, 9, 14, 3, 12, 21, 1, 5, 6, 8, 15)]
sites2remove <- setdiff(x = measured, y = sites2keep)
idx1 <- which(modelSIF[, 1]%in%sites2remove)
idx2 <- which(modelSIF[, 3]%in%sites2remove)
pknSIF <- modelSIF[-unique(c(idx1, idx2)), ]
write.table(x = pknSIF, file = "sif.txt", quote = FALSE, sep = " ", row.names = FALSE, col.names = FALSE)
model <- readSIF(sifFile = "sif.txt")
plotModel(model = model, CNOlist = cnolist)
idx <- which(colnames(cnolist@signals$`0`)%in%sites2remove)
for(ii in 1:length(cnolist@signals)){
cnolist@signals[[ii]] <- cnolist@signals[[ii]][, -idx]
cnolist@variances[[ii]] <- cnolist@variances[[ii]][, -idx]
}
temp = cnolist
model <- preprocessing(data = cnolist, model = model, compression = TRUE, expansion = FALSE)
plotModel(model = model, CNOlist = cnolist)
allSpecies <- model$namesSpecies
mappingTable <- matrix(data = , nrow = length(allSpecies), ncol = 2)
mappingTable[, 1] <- allSpecies
mappingTable[1, 2] <- "AKT_S473"
mappingTable[2, 2] <- "PIK3R1"
mappingTable[3, 2] <- "IRS1"
mappingTable[4, 2] <- "RAF1_S338"
mappingTable[5, 2] <- "MEK"
mappingTable[6, 2] <- "GSK3_S9"
mappingTable[7, 2] <- "ERK_T202"
mappingTable[8, 2] <- "IGF1R"
mappingTable[9, 2] <- "JNK_T185"
mappingTable[10, 2] <- "MTOR_S2448"
mappingTable[11, 2] <- "GSK3_S21"
mappingTable[12, 2] <- "HGF"
mappingTable[13, 2] <- "ERK"
mappingTable[14, 2] <- "FGFR"
mappingTable[15, 2] <- "NRG1"
mappingTable[16, 2] <- "EGFR"
mappingTable[17, 2] <- "STAT3_Y705"
mappingTable[18, 2] <- "EGFR_Y992"
mappingTable[19, 2] <- "AKT"
mappingTable[20, 2] <- "RPS6KB1_T389"
mappingTable[21, 2] <- "INSULIN"
mappingTable[22, 2] <- "MET_1235"
mappingTable[23, 2] <- "SERUM"
mappingTable[24, 2] <- "EIF4EBP1_S65"
mappingTable[25, 2] <- "RB1_S807"
sif <- model2sif(model = model)
for(ii in 1:nrow(sif)){
sif[ii, 1] <- mappingTable[which(mappingTable[, 1]==sif[ii, 1]), 2]
sif[ii, 3] <- mappingTable[which(mappingTable[, 1]==sif[ii, 3]), 2]
}
sif <- sif[-c(35, 31, 5, 8, 40, 68:76, 51, 16, 17, 26), ]
write.table(x = sif, file = "sif.txt", quote = FALSE, sep = " ", row.names = FALSE, col.names = FALSE)
model <- readSIF(sifFile = "sif.txt")
cno <- cnolist
for(ii in 1:ncol(cnolist@cues)){
colnames(cnolist@cues)[ii] <- mappingTable[which(mappingTable[, 1]==colnames(cnolist@cues)[ii]), 2]
}
for(ii in 1:ncol(cnolist@inhibitors)){
colnames(cnolist@inhibitors)[ii] <- mappingTable[which(mappingTable[, 1]==colnames(cnolist@inhibitors)[ii]), 2]
}
for(ii in 1:ncol(cnolist@stimuli)){
colnames(cnolist@stimuli)[ii] <- mappingTable[which(mappingTable[, 1]==colnames(cnolist@stimuli)[ii]), 2]
}
for(ii in 1:length(cnolist@signals)){
for(jj in 1:ncol(cnolist@signals[[ii]])){
colnames(cnolist@signals[[ii]])[jj] <- mappingTable[which(mappingTable[, 1]==colnames(cnolist@signals[[ii]])[jj]), 2]
}
}
cnolist@cues <- cnolist@cues[, -7]
cnolist@stimuli <- cnolist@stimuli[, -7]
plotModel(model = model, CNOlist = cnolist)
library(OmnipathR)
ptms = import_Omnipath_PTMS()
ptms$substrate_genesymbol[which(ptms$substrate_genesymbol%in%paste0("MAPK", 1:3))] <- "ERK"
ptms$substrate_genesymbol[which(ptms$substrate_genesymbol%in%paste0("GSK3", c("A", "B")))] <- "GSK3"
ptms$substrate_genesymbol[which(ptms$substrate_genesymbol%in%paste0("MAPK", 8:10))] <- "JNK"
ptms$substrate_genesymbol[which(ptms$substrate_genesymbol%in%paste0("AKT", 1:2))] <- "AKT"
ptmsSites <- paste0(ptms$substrate_genesymbol, "_", ptms$residue_type, ptms$residue_offset)
ptms <- ptms[which(ptmsSites%in%model$namesSpecies), ]
interactions = import_Omnipath_Interactions()
interactions = interactions[which(interactions$is_directed==1), ]
interactions = interactions[which(rowSums(interactions[, c(6, 7)])==1), ]
database <- matrix(data = , nrow = nrow(interactions), ncol = 3)
database[, 1] <- interactions$source_genesymbol
database[which(interactions$is_stimulation==1), 2] <- "1"
database[which(interactions$is_inhibition==1), 2] <- "-1"
database[, 3] <- interactions$target_genesymbol
for(ii in 1:nrow(ptms)){
database <- rbind(database, t(as.matrix(c(ptms$enzyme_genesymbol[ii], "1", paste0(ptms$substrate_genesymbol[ii], "_", ptms$residue_type[ii], ptms$residue_offset[ii])))))
database <- rbind(database, t(as.matrix(c(ptms$enzyme_genesymbol[ii], "-1", paste0(ptms$substrate_genesymbol[ii], "_", ptms$residue_type[ii], ptms$residue_offset[ii])))))
}
rm(list = ls())
getwd()
setwd("~/Desktop/Feeder_CPT/HPN-DREAM-PREPROCESSED/Project-9/Data/")
library(CellNOptR)
pkn <- readSIF(sifFile = "merge_hpn_cmpr_CS.sif")
cnolist <- CNOlist(data = "UACC812Refined-Remove-ready.csv", verbose = TRUE) # at this point getting an error and it needs to be fixed
data<-read.csv(file="UACC812Refined-Remove-ready.csv",header=TRUE,sep=',',fill=TRUE,as.is=TRUE,check.names=FALSE)
TRcol<-grep(pattern="TR:",x=colnames(data),ignore.case=FALSE)
DAcol<-grep(pattern="DA:",x=colnames(data),ignore.case=FALSE)
DVcol<-grep(pattern="DV:",x=colnames(data),ignore.case=FALSE)
uniqueExp <- unique(data[, TRcol])
uniqueExp <- uniqueExp[c(7, 2, 3, 4, 5, 6, 1, 8:18), ]
expID <- 1:nrow(uniqueExp)
timeID <- sort(unique(data$`DA:ALL`))
trackID <- c()
for(ii in 1:length(timeID)){
for(jj in 1:length(expID)){
for(kk in 1:nrow(data)){
if((all(uniqueExp[ii, ]==data[jj, TRcol])) && (data$`DA:ALL`[kk]==timeID[ii])){
trackID <- c(trackID, kk)
}
}
}
}
dataSorted <- unique(data[trackID, ])
cNames <- colnames(dataSorted)
idx <- which(grepl(pattern = "DA:", x = cNames, fixed = TRUE))
dataSorted <- dataSorted[, -idx[-1]]
write.csv(x = dataSorted, file = "midas.csv", sep = ",", quote = FALSE)
cnolist <- CNOlist(data = "midas.csv", verbose = TRUE)
plotModel(model = pkn, CNOlist = cnolist)
model <- preprocessing(data = cnolist, model = pkn, compression = TRUE, expansion = FALSE)
rm(list = ls())
library(CellNOptR)
pkn <- readSIF(sifFile = "merge_hpn_cmpr_CS.sif")
cnolist <- CNOlist(data = "UACC812Refined-Remove-ready.csv", verbose = TRUE) # at this point getting an error and it needs to be fixed
data<-read.csv(file="UACC812Refined-Remove-ready.csv",header=TRUE,sep=',',fill=TRUE,as.is=TRUE,check.names=FALSE)
TRcol<-grep(pattern="TR:",x=colnames(data),ignore.case=FALSE)
DAcol<-grep(pattern="DA:",x=colnames(data),ignore.case=FALSE)
DVcol<-grep(pattern="DV:",x=colnames(data),ignore.case=FALSE)
uniqueExp <- unique(data[, TRcol])
uniqueExp <- uniqueExp[c(7, 2, 3, 4, 5, 6, 1, 8:18), ]
expID <- 1:nrow(uniqueExp)
timeID <- sort(unique(data$`DA:ALL`))
trackID <- c()
for(ii in 1:length(timeID)){
for(jj in 1:length(expID)){
for(kk in 1:nrow(data)){
if((all(uniqueExp[ii, ]==data[jj, TRcol])) && (data$`DA:ALL`[kk]==timeID[ii])){
trackID <- c(trackID, kk)
}
}
}
}
dataSorted <- unique(data[trackID, ])
cNames <- colnames(dataSorted)
idx <- which(grepl(pattern = "DA:", x = cNames, fixed = TRUE))
dataSorted <- dataSorted[, -idx[-1]]
write.csv(x = dataSorted, file = "midas.csv", sep = ",", quote = FALSE)
cnolist <- CNOlist(data = "midas.csv", verbose = TRUE)
plotModel(model = pkn, CNOlist = cnolist)
model = pkn
modelSIF <- model2sif(model = model)
measured <- colnames(cnolist@signals$`0`)
sites2keep <- measured[c(13, 16, 19, 2, 9, 14, 3, 12, 21, 1, 5, 6, 8, 15)]
sites2remove <- setdiff(x = measured, y = sites2keep)
idx1 <- which(modelSIF[, 1]%in%sites2remove)
idx2 <- which(modelSIF[, 3]%in%sites2remove)
pknSIF <- modelSIF[-unique(c(idx1, idx2)), ]
write.table(x = pknSIF, file = "sif.txt", quote = FALSE, sep = " ", row.names = FALSE, col.names = FALSE)
model <- readSIF(sifFile = "sif.txt")
plotModel(model = model, CNOlist = cnolist)
idx <- which(colnames(cnolist@signals$`0`)%in%sites2remove)
for(ii in 1:length(cnolist@signals)){
cnolist@signals[[ii]] <- cnolist@signals[[ii]][, -idx]
cnolist@variances[[ii]] <- cnolist@variances[[ii]][, -idx]
}
temp = cnolist
model <- preprocessing(data = cnolist, model = model, compression = TRUE, expansion = FALSE)
rm(list = ls())
allSpecies <- model$namesSpecies
library(CellNOptR)
pkn <- readSIF(sifFile = "merge_hpn_cmpr_CS.sif")
cnolist <- CNOlist(data = "UACC812Refined-Remove-ready.csv", verbose = TRUE) # at this point getting an error and it needs to be fixed
data<-read.csv(file="UACC812Refined-Remove-ready.csv",header=TRUE,sep=',',fill=TRUE,as.is=TRUE,check.names=FALSE)
TRcol<-grep(pattern="TR:",x=colnames(data),ignore.case=FALSE)
DAcol<-grep(pattern="DA:",x=colnames(data),ignore.case=FALSE)
DVcol<-grep(pattern="DV:",x=colnames(data),ignore.case=FALSE)
uniqueExp <- unique(data[, TRcol])
uniqueExp <- uniqueExp[c(7, 2, 3, 4, 5, 6, 1, 8:18), ]
expID <- 1:nrow(uniqueExp)
timeID <- sort(unique(data$`DA:ALL`))
trackID <- c()
for(ii in 1:length(timeID)){
for(jj in 1:length(expID)){
for(kk in 1:nrow(data)){
if((all(uniqueExp[ii, ]==data[jj, TRcol])) && (data$`DA:ALL`[kk]==timeID[ii])){
trackID <- c(trackID, kk)
}
}
}
}
dataSorted <- unique(data[trackID, ])
cNames <- colnames(dataSorted)
idx <- which(grepl(pattern = "DA:", x = cNames, fixed = TRUE))
dataSorted <- dataSorted[, -idx[-1]]
write.csv(x = dataSorted, file = "midas.csv", sep = ",", quote = FALSE)
cnolist <- CNOlist(data = "midas.csv", verbose = TRUE)
plotModel(model = pkn, CNOlist = cnolist)
model = pkn
modelSIF <- model2sif(model = model)
measured <- colnames(cnolist@signals$`0`)
sites2keep <- measured[c(13, 16, 19, 2, 9, 14, 3, 12, 21, 1, 5, 6, 8, 15)]
sites2remove <- setdiff(x = measured, y = sites2keep)
idx1 <- which(modelSIF[, 1]%in%sites2remove)
idx2 <- which(modelSIF[, 3]%in%sites2remove)
pknSIF <- modelSIF[-unique(c(idx1, idx2)), ]
write.table(x = pknSIF, file = "sif.txt", quote = FALSE, sep = " ", row.names = FALSE, col.names = FALSE)
model <- readSIF(sifFile = "sif.txt")
plotModel(model = model, CNOlist = cnolist)
idx <- which(colnames(cnolist@signals$`0`)%in%sites2remove)
for(ii in 1:length(cnolist@signals)){
cnolist@signals[[ii]] <- cnolist@signals[[ii]][, -idx]
cnolist@variances[[ii]] <- cnolist@variances[[ii]][, -idx]
}
temp = cnolist
allSpecies <- model$namesSpecies
mappingTable <- matrix(data = , nrow = length(allSpecies), ncol = 2)
View(mappingTable)
mappingTable[, 1] <- allSpecies
mappingTable[1, 2] <- "AKT_S473"
mappingTable[2, 2] <- "PIK3R1"
mappingTable[3, 2] <- "IRS1"
mappingTable[4, 2] <- "RAF1_S338"
mappingTable[5, 2] <- "MEK"
mappingTable[6, 2] <- "GSK3_S9"
mappingTable[7, 2] <- "ERK_T202"
mappingTable[8, 2] <- "IGF1R"
mappingTable[9, 2] <- "JNK_T185"
mappingTable[10, 2] <- "MTOR_S2448"
mappingTable[11, 2] <- "GSK3_S21"
mappingTable[12, 2] <- "HGF"
mappingTable[13, 2] <- "ERK"
mappingTable[14, 2] <- "FGFR"
mappingTable[15, 2] <- "NRG1"
mappingTable[16, 2] <- "EGFR"
mappingTable[17, 2] <- "STAT3_Y705"
mappingTable[18, 2] <- "EGFR_Y992"
mappingTable[19, 2] <- "AKT"
mappingTable[20, 2] <- "RPS6KB1_T389"
mappingTable[21, 2] <- "INSULIN"
mappingTable[22, 2] <- "MET_1235"
mappingTable[23, 2] <- "SERUM"
mappingTable[24, 2] <- "EIF4EBP1_S65"
mappingTable[25, 2] <- "RB1_S807"
rm(list = ls())
load(file = "../../../HPN-DREAM/Project-1/Data/model.RData")
load(file = "../../../HPN-DREAM/Project-1/Data/cnolist.RData")
plotModel(model = model, CNOlist = cnolist)
